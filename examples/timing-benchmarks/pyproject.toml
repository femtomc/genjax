[project]
name = "timing_benchmarks"
version = "0.1.0"
description = "Timing benchmarks for probabilistic programming frameworks"
authors = [{name = "GenJAX Team"}]
requires-python = ">=3.10"

[project.scripts]
timing-benchmarks = "timing_benchmarks.main:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.pixi.project]
channels = ["conda-forge", "pytorch", "nvidia"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
seaborn = "*"
pandas = "*"
scipy = "*"

[tool.pixi.pypi-dependencies]
jax = ">=0.6.0,<0.7"
jaxlib = ">=0.6.0,<0.7"
numpyro = "*"
genjax = { path = "../..", editable = true }

[tool.pixi.feature.cuda.system-requirements]
cuda = "12"

[tool.pixi.feature.cuda.target.linux-64.dependencies]
# CUDA-enabled JAX for GPU acceleration on linux-64
jaxlib = { version = ">=0.6.0,<0.7", build = "*cuda12*" }

[tool.pixi.feature.cuda.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
seaborn = "*"
pandas = "*"
scipy = "*"

[tool.pixi.feature.cuda.pypi-dependencies]
jax = ">=0.6.0,<0.7"
numpyro = "*"
genjax = { path = "../..", editable = true }
tensorflow-probability = "*"

[tool.pixi.feature.pyro.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
seaborn = "*"
pandas = "*"
scipy = "*"
# Use CUDA-enabled PyTorch
pytorch = { version = ">=2.0", channel = "pytorch" }
pytorch-cuda = { version = "12.*", channel = "pytorch" }
torchvision = { version = "*", channel = "pytorch" }

[tool.pixi.feature.pyro.pypi-dependencies]
pyro-ppl = "*"

[tool.pixi.feature.torch.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
seaborn = "*"
pandas = "*"
scipy = "*"
pytorch = { version = ">=2.0", channel = "pytorch" }
pytorch-cuda = { version = "12.*", channel = "pytorch" }

[tool.pixi.feature.torch.pypi-dependencies]
triton = "*"
setuptools = "*"

[tool.pixi.environments]
default = { features = [], solve-group = "default" }
cuda = { features = ["cuda"], solve-group = "cuda" }
pyro = { features = ["pyro"], solve-group = "pyro" }
torch = { features = ["torch"], solve-group = "torch" }

[tool.pixi.tasks]
# === GMM Benchmarks ===
# Quick test run (small data sizes, few repeats)
gmm-quick = { depends-on = ["cuda-gmm-quick", "torch-gmm-quick", "gmm-plot"] }

# Full benchmark run (all data sizes, many repeats)
gmm-all = { depends-on = ["cuda-gmm-all", "torch-gmm-all", "gmm-plot"] }

# Generate GMM comparison plot
gmm-plot = "python combine_handcoded_results.py"

# === CurveFit Benchmarks ===
# Generate curvefit data
generate-data = "python src/timing_benchmarks/generate_curvefit_data.py"

# Run individual framework benchmarks
curvefit-genjax = "python -m timing_benchmarks.curvefit-benchmarks.genjax --output-dir data/curvefit/genjax --repeats 100"
curvefit-numpyro = "python -m timing_benchmarks.curvefit-benchmarks.numpyro --output-dir data/curvefit/numpyro --repeats 100"
curvefit-genjl = "python -m timing_benchmarks.curvefit-benchmarks.genjl --output-dir data/curvefit/genjl_dynamic --method is --repeats 50"

# Combine results and generate plots
curvefit-plot = "python combine_results.py --data-dir data"

# Full curvefit pipeline
curvefit-all = { depends-on = ["generate-data", "curvefit-genjax", "curvefit-numpyro", "cuda-curvefit-tfp", "pyro-curvefit", "curvefit-plot"] }

# === Cleanup ===
clean-data = "rm -rf data/curvefit data/genjax_handcoded data/handcoded_jax data/handcoded_torch"
clean-figs = "rm -rf figs/*.pdf figs/*.png"
clean-all = { depends-on = ["clean-data", "clean-figs"] }

# === CUDA Environment Tasks ===
[tool.pixi.feature.cuda.tasks]
# GMM benchmarks - JAX implementations
cuda-gmm-genjax = "python -m src.timing_benchmarks.handcoded_benchmarks.genjax_handcoded --repeats 100"
cuda-gmm-jax = "python -m src.timing_benchmarks.handcoded_benchmarks.jax_handcoded --repeats 100"

# Quick versions for testing
cuda-gmm-genjax-quick = "python -m src.timing_benchmarks.handcoded_benchmarks.genjax_handcoded --data-sizes 1000 10000 --repeats 10"
cuda-gmm-jax-quick = "python -m src.timing_benchmarks.handcoded_benchmarks.jax_handcoded --data-sizes 1000 10000 --repeats 10"

# Combined tasks
cuda-gmm-quick = { depends-on = ["cuda-gmm-genjax-quick", "cuda-gmm-jax-quick"] }
cuda-gmm-all = { depends-on = ["cuda-gmm-genjax", "cuda-gmm-jax"] }

# CurveFit benchmarks
cuda-curvefit-tfp = "python -m timing_benchmarks.curvefit-benchmarks.handcoded_tfp --output-dir data/curvefit/handcoded_tfp --repeats 100"

# HMC benchmarks on GPU
hmc-genjax = "python run_hmc_benchmarks.py --frameworks genjax --chain-lengths 100 500 1000 5000 --repeats 100 --device cuda"
hmc-numpyro = "python run_hmc_benchmarks.py --frameworks numpyro --chain-lengths 100 500 1000 5000 --repeats 100 --device cuda"
hmc-handcoded = "python run_hmc_benchmarks.py --frameworks handcoded_tfp --chain-lengths 100 500 1000 5000 --repeats 100 --device cuda"
hmc-all = { depends-on = ["hmc-genjax", "hmc-numpyro", "hmc-handcoded"] }

# Quick HMC test with fewer repeats
hmc-test = "python run_hmc_benchmarks.py --frameworks genjax numpyro handcoded_tfp --chain-lengths 100 1000 --repeats 5 --device cuda"

# Generate HMC comparison plots
hmc-plot = "python combine_results.py --frameworks genjax numpyro handcoded_tfp handcoded_torch genjl --data-dir data --output-dir figs"

# === PyTorch Environment Tasks ===
[tool.pixi.feature.torch.tasks]
# GMM benchmarks - PyTorch implementation
torch-gmm = "python -m src.timing_benchmarks.handcoded_benchmarks.torch_handcoded --repeats 100"
torch-gmm-quick = "python -m src.timing_benchmarks.handcoded_benchmarks.torch_handcoded --data-sizes 1000 10000 --repeats 10"

# HMC benchmarks
hmc-torch = "python run_hmc_benchmarks.py --frameworks handcoded_torch --chain-lengths 100 500 1000 5000 --repeats 100 --device cuda"

# === Pyro Environment Tasks ===
[tool.pixi.feature.pyro.tasks]
# Pyro benchmarks (with CUDA support)
pyro-curvefit = "python src/timing_benchmarks/curvefit-benchmarks/pyro.py --output-dir data/curvefit/pyro --method is --repeats 50 --device cuda"
pyro-torch = "python src/timing_benchmarks/curvefit-benchmarks/handcoded_torch.py --output-dir data/curvefit/handcoded_torch --repeats 50"

# HMC benchmarks
hmc-pyro = "python run_hmc_benchmarks.py --frameworks pyro --chain-lengths 100 500 1000 5000 --repeats 100 --device cuda"

