[project]
name = "curvefit"
version = "0.1.0"
description = "Curve fitting case study for GenJAX with outlier-robust inference"
authors = [{name = "GenJAX Team"}]
requires-python = ">=3.10"

[project.scripts]
curvefit = "examples.curvefit.main:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "../.."}

[tool.setuptools.packages.find]
where = ["../.."]
include = ["examples.curvefit*"]

[tool.pixi.project]
channels = ["conda-forge", "nvidia"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
seaborn = "*"
jax = ">=0.6.0,<0.7"
jaxlib = ">=0.6.0,<0.7"

[tool.pixi.pypi-dependencies]
genjax = { path = "../..", editable = true }
numpyro = "*"
funsor = "*"

[tool.pixi.feature.cuda.system-requirements]
cuda = "12"

[tool.pixi.feature.cuda.target.linux-64.dependencies]
# CUDA-enabled JAX for GPU acceleration on linux-64
jaxlib = { version = ">=0.6.0,<0.7", build = "*cuda12*" }

[tool.pixi.feature.cuda.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
seaborn = "*"
jax = ">=0.6.0,<0.7"

[tool.pixi.feature.cuda.pypi-dependencies]
genjax = { path = "../..", editable = true }
numpyro = "*"
funsor = "*"

[tool.pixi.environments]
default = { features = [], solve-group = "default" }
cuda = { features = ["cuda"], solve-group = "cuda" }

[tool.pixi.tasks]
# === Development Setup ===
install-dev = "echo 'Package available via PYTHONPATH in pixi environment'"
test = { cmd = "python -m examples.curvefit.main quick", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Figure Generation ===
outlier = { cmd = "python -m examples.curvefit.main outlier", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
quick = { cmd = "python -m examples.curvefit.main quick", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
full = { cmd = "python -m examples.curvefit.main full", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
benchmark = { cmd = "python -m examples.curvefit.main benchmark", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
is-only = { cmd = "python -m examples.curvefit.main is-only", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
scaling = { cmd = "python -m examples.curvefit.main scaling", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Combined Workflows ===
all-figures = { cmd = "python -m examples.curvefit.main full", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === CUDA Environment Tasks ===
[tool.pixi.feature.cuda.tasks]
cuda-outlier = { cmd = "python -m examples.curvefit.main outlier", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-quick = { cmd = "python -m examples.curvefit.main quick", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-full = { cmd = "python -m examples.curvefit.main full", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-benchmark = { cmd = "python -m examples.curvefit.main benchmark", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-info = "python -c 'import jax; print(f\"JAX version: {jax.__version__}\"); print(f\"JAX devices: {jax.devices()}\"); print(f\"Default backend: {jax.default_backend()}\")'"

# === Cleanup ===
clean-figs = "rm -f figs/*.pdf figs/*.png"
clean-data = "rm -rf data/experiment_*"
clean-all = { depends-on = ["clean-figs", "clean-data"] }