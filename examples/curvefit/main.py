"""
GenJAX Curvefit Case Study - Simplified Main Entry Point

Supports three modes:
- quick: Fast demonstration with basic visualizations
- full: Complete analysis with all visualizations
- benchmark: Framework comparison (IS 1000 vs HMC methods)
"""

import argparse


def parse_args():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="GenJAX Curvefit Case Study - Bayesian Sine Wave Parameter Estimation"
    )

    parser.add_argument(
        "mode",
        choices=["paper"],
        nargs="?",
        default="paper",
        help="Analysis mode: paper (generate only paper figures)",
    )

    # Analysis parameters
    parser.add_argument(
        "--n-points", type=int, default=10, help="Number of data points (default: 10)"
    )
    parser.add_argument(
        "--n-samples-is",
        type=int,
        default=1000,
        help="Number of importance sampling particles (default: 1000)",
    )
    parser.add_argument(
        "--n-samples-hmc",
        type=int,
        default=1000,
        help="Number of HMC samples (default: 1000)",
    )
    parser.add_argument(
        "--n-warmup",
        type=int,
        default=500,
        help="Number of HMC warmup samples (default: 500)",
    )
    parser.add_argument(
        "--timing-repeats",
        type=int,
        default=20,
        help="Timing repetitions (default: 20)",
    )
    parser.add_argument(
        "--seed", type=int, default=42, help="Random seed (default: 42)"
    )
    
    # Outlier model parameters
    parser.add_argument(
        "--outlier-rate", type=float, default=0.2, help="Prior outlier probability (default: 0.2)"
    )
    parser.add_argument(
        "--outlier-mean", type=float, default=0.0, help="Outlier distribution mean (default: 0.0)"
    )
    parser.add_argument(
        "--outlier-std", type=float, default=5.0, help="Outlier distribution std dev (default: 5.0)"
    )
    parser.add_argument(
        "--outlier-comprehensive", action="store_true", 
        help="Run comprehensive outlier analysis with all figures"
    )

    return parser.parse_args()


# All old modes removed - keeping only paper mode


def run_paper_mode(args):
    """Generate only the figures used in the POPL paper."""
    from examples.curvefit.figs import (
        save_multiple_multipoint_traces_with_density,
        save_single_multipoint_trace_with_density,
        save_inference_scaling_viz,
        save_posterior_scaling_plots,
        save_outlier_detection_comparison,
    )

    print("=== Paper Mode: POPL Figure Generation ===")

    save_multiple_multipoint_traces_with_density()
    save_single_multipoint_trace_with_density()
    save_inference_scaling_viz(
        n_trials=5,
        particle_counts=None,  # Use full extended range from original (30 counts: 10 to 1M)
        max_large_trials=2,
    )
    save_posterior_scaling_plots()
    save_outlier_detection_comparison()

    print("\nPaper mode complete!")
    print("Generated figures:")
    print("  - curvefit_prior_multipoint_traces_density.pdf")
    print("  - curvefit_single_multipoint_trace_density.pdf")
    print("  - curvefit_scaling_performance.pdf")
    print("  - curvefit_posterior_scaling_combined.pdf")
    print("  - curvefit_outlier_detection_comparison.pdf")
    print("\nNote: curvefit_vectorization_illustration.pdf is a static diagram (not generated by code)")


def main():
    """Main entry point."""
    args = parse_args()

    print("\nGenJAX Curvefit Case Study")
    print(f"Mode: paper (artifact submission)")

    run_paper_mode(args)

    print("\nDone!")


if __name__ == "__main__":
    main()
