[project]
name = "gol"
version = "0.1.0"
description = "Game of Life case study for GenJAX"
authors = [{name = "GenJAX Team"}]
requires-python = ">=3.10"

[project.scripts]
gol = "examples.gol.main:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "../.."}

[tool.setuptools.packages.find]
where = ["../.."]
include = ["examples.gol*"]

[tool.pixi.project]
channels = ["conda-forge", "nvidia"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
jax = ">=0.6.0,<0.7"
jaxlib = ">=0.6.0,<0.7"

[tool.pixi.pypi-dependencies]
genjax = { path = "../..", editable = true }

[tool.pixi.feature.cuda.system-requirements]
cuda = "12"

[tool.pixi.feature.cuda.target.linux-64.dependencies]
# CUDA-enabled JAX for GPU acceleration on linux-64
jaxlib = { version = ">=0.6.0,<0.7", build = "*cuda12*" }

[tool.pixi.feature.cuda.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
jax = ">=0.6.0,<0.7"

[tool.pixi.feature.cuda.pypi-dependencies]
genjax = { path = "../..", editable = true }

[tool.pixi.environments]
default = { features = [], solve-group = "default" }
cuda = { features = ["cuda"], solve-group = "cuda" }

[tool.pixi.tasks]
# === Development Setup ===
install-dev = "echo 'Package available via PYTHONPATH in pixi environment'"
test = { cmd = "python -m examples.gol.main test", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Quick Tests ===
gol-blinker = { cmd = "python -m examples.gol.main --mode blinker", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-logo = { cmd = "python -m examples.gol.main --mode logo", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-timing = { cmd = "python -m examples.gol.main --mode timing", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-all = { cmd = "python -m examples.gol.main --mode all", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Parameterized Runs ===
gol-custom = { cmd = "python -m examples.gol.main", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-quick = { cmd = "python -m examples.gol.main --mode blinker --chain-length 50", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === CUDA Environment Tasks ===
[tool.pixi.feature.cuda.tasks]
cuda-gol-blinker = { cmd = "python -m examples.gol.main --mode blinker", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-gol-logo = { cmd = "python -m examples.gol.main --mode logo", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-gol-timing = { cmd = "python -m examples.gol.main --mode timing --device gpu", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-gol-all = { cmd = "python -m examples.gol.main --mode all --device gpu", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-info = "python -c 'import jax; print(f\"JAX version: {jax.__version__}\"); print(f\"JAX devices: {jax.devices()}\"); print(f\"Default backend: {jax.default_backend()}\")'"

# === Data Export/Import ===
gol-gibbs-experiment = { cmd = "python -m examples.gol.run_gibbs_experiments", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-gibbs-all-patterns = { cmd = "python -m examples.gol.run_gibbs_experiments --all-patterns", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-timing-data = { cmd = "python -m examples.gol.run_gibbs_sweep_timing_simple", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-timing-optimized = { cmd = "python -m examples.gol.run_gibbs_sweep_timing_optimized", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Showcase Figure Generation ===
gol-showcase = { cmd = "python -m examples.gol.generate_showcase --pattern wizards --size 256", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-showcase-1024 = { cmd = "python -m examples.gol.generate_showcase --pattern wizards --size 1024", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-showcase-mit = { cmd = "python -m examples.gol.generate_showcase --pattern mit --size 256", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-showcase-from-data = { cmd = "python -m examples.gol.generate_showcase --load-from", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-schematic = { cmd = "python -m examples.gol.generate_schematic --pattern wizards --size 256", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-schematic-1024 = { cmd = "python -m examples.gol.generate_schematic --pattern wizards --size 1024", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-combined = { cmd = "python -m examples.gol.generate_combined --pattern wizards --size 256", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-combined-1024 = { cmd = "python -m examples.gol.generate_combined --pattern wizards --size 1024", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-integrated = { cmd = "python -m examples.gol.generate_integrated --pattern wizards --size 256", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
gol-integrated-1024 = { cmd = "python -m examples.gol.generate_integrated --pattern wizards --size 1024", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Cleanup ===
clean-figs = "rm -f figs/*.pdf"
clean-data = "rm -rf data/gibbs_experiments"
clean-all = { depends-on = ["clean-figs", "clean-data"] }