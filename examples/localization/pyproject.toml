[project]
name = "localization"
version = "0.1.0"
description = "Particle filter localization case study for GenJAX"
authors = [{name = "GenJAX Team"}]
requires-python = ">=3.10"

[project.scripts]
localization = "examples.localization.main:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "../.."}

[tool.setuptools.packages.find]
where = ["../.."]
include = ["examples.localization*"]

[tool.pixi.project]
channels = ["conda-forge", "nvidia"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
jax = ">=0.6.0,<0.7"
jaxlib = ">=0.6.0,<0.7"

[tool.pixi.pypi-dependencies]
genjax = { path = "../..", editable = true }

[tool.pixi.feature.cuda.system-requirements]
cuda = "12"

[tool.pixi.feature.cuda.target.linux-64.dependencies]
# CUDA-enabled JAX for GPU acceleration on linux-64
jaxlib = { version = ">=0.6.0,<0.7", build = "*cuda12*" }

[tool.pixi.feature.cuda.dependencies]
python = ">=3.10"
numpy = "*"
matplotlib = "*"
jax = ">=0.6.0,<0.7"

[tool.pixi.feature.cuda.pypi-dependencies]
genjax = { path = "../..", editable = true }

[tool.pixi.environments]
default = { features = [], solve-group = "default" }
cuda = { features = ["cuda"], solve-group = "cuda" }

[tool.pixi.tasks]
# === Development Setup ===
install-dev = "echo 'Package available via PYTHONPATH in pixi environment'"
test = { cmd = "python -m examples.localization.main generate-data --n-particles 10 --n-steps 5 --timing-repeats 2", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Quick Tests ===
localization-test = { cmd = "python -m examples.localization.main generate-data --n-particles 50 --n-steps 10 --timing-repeats 3", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
localization-quick = { cmd = "python -m examples.localization.main generate-data --n-particles 100 --n-steps 20 --timing-repeats 5", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Standard Experiments ===
localization-experiment = { cmd = "python -m examples.localization.main generate-data", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
localization-generate-data = { cmd = "python -m examples.localization.main generate-data --include-basic-demo --include-smc-comparison", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
localization-plot = { cmd = "python -m examples.localization.main plot-figures", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Combined Workflows ===
localization-all = { cmd = "python -m examples.localization.main generate-data --include-basic-demo --include-smc-comparison && python -m examples.localization.main plot-figures", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === Custom Runs ===
localization-custom = { cmd = "python -m examples.localization.main", env = { PYTHONPATH = "../..:$PYTHONPATH" } }

# === CUDA Environment Tasks ===
[tool.pixi.feature.cuda.tasks]
cuda-localization-test = { cmd = "python -m examples.localization.main generate-data --n-particles 50 --n-steps 10 --timing-repeats 3", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-localization-experiment = { cmd = "python -m examples.localization.main generate-data", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-localization-all = { cmd = "python -m examples.localization.main generate-data --include-basic-demo --include-smc-comparison && python -m examples.localization.main plot-figures", env = { PYTHONPATH = "../..:$PYTHONPATH" } }
cuda-info = "python -c 'import jax; print(f\"JAX version: {jax.__version__}\"); print(f\"JAX devices: {jax.devices()}\"); print(f\"Default backend: {jax.default_backend()}\")'"

# === Cleanup ===
clean-figs = "rm -f figs/*.pdf figs/*.png"
clean-data = "rm -rf data/experiment_*"
clean-all = { depends-on = ["clean-figs", "clean-data"] }