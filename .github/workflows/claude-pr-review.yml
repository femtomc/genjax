name: Claude PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]

jobs:
  claude-review:
    # Only run on PR comments that contain '/claude review'
    if: |
      (github.event_name == 'pull_request') ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/claude review')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '/claude review'))

    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = context.issue.number || context.payload.pull_request.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            // Get the diff
            const { data: diff } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number,
              mediaType: {
                format: 'diff'
              }
            });

            // Get changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });

            return {
              title: pr.title,
              body: pr.body || '',
              diff: diff,
              files: files.map(f => f.filename),
              base: pr.base.ref,
              head: pr.head.ref
            };

      - name: Read CLAUDE.md files
        id: claude-context
        run: |
          # Find and concatenate relevant CLAUDE.md files
          claude_content=""

          # Always include root CLAUDE.md
          if [ -f "CLAUDE.md" ]; then
            claude_content="# Root CLAUDE.md\n\n$(cat CLAUDE.md)\n\n"
          fi

          # Include CLAUDE.md files from changed directories
          changed_dirs=$(echo '${{ steps.pr-details.outputs.result }}' | jq -r '.files[]' | xargs -n1 dirname | sort -u)

          for dir in $changed_dirs; do
            claude_file="$dir/CLAUDE.md"
            if [ -f "$claude_file" ]; then
              claude_content="${claude_content}# $claude_file\n\n$(cat $claude_file)\n\n"
            fi
          done

          # Save to file to handle multiline content
          echo "$claude_content" > claude_context.txt

      - name: Call Claude API
        id: claude-review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Prepare the prompt
          cat > prompt.txt << 'EOF'
          You are reviewing a pull request for the GenJAX probabilistic programming library.

          Please provide a thorough code review focusing on:
          1. Correctness and potential bugs
          2. JAX best practices (especially control flow)
          3. GenJAX idioms and patterns
          4. Performance considerations
          5. Test coverage
          6. Documentation updates

          Here is the project context from CLAUDE.md files:

          EOF

          cat claude_context.txt >> prompt.txt

          cat >> prompt.txt << 'EOF'

          PR Title: ${{ fromJson(steps.pr-details.outputs.result).title }}
          PR Description: ${{ fromJson(steps.pr-details.outputs.result).body }}

          Files changed: ${{ join(fromJson(steps.pr-details.outputs.result).files, ', ') }}

          Here is the diff:

          ```diff
          ${{ fromJson(steps.pr-details.outputs.result).diff }}
          ```

          Please provide:
          1. A summary of the changes
          2. Any issues or concerns (with specific line references)
          3. Suggestions for improvement
          4. JAX-specific concerns (if any)
          5. Overall recommendation (approve, request changes, or comment)

          Format your response as a GitHub PR review comment.
          EOF

          # Call Claude API
          response=$(curl -X POST https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d @- << EOF
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 4000,
            "messages": [
              {
                "role": "user",
                "content": $(jq -Rs . < prompt.txt)
              }
            ]
          }
          EOF
          )

          # Extract the response content
          echo "$response" | jq -r '.content[0].text' > review.md

      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');

            const pr_number = context.issue.number || context.payload.pull_request.number;

            // Post as a PR comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: `## ðŸ¤– Claude Code Review\n\n${review}\n\n---\n*This review was generated by Claude. Trigger a new review by commenting \`/claude review\`*`
            });

      - name: Add Labels Based on Review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8').toLowerCase();

            const pr_number = context.issue.number || context.payload.pull_request.number;
            const labels = [];

            // Add labels based on review content
            if (review.includes('lgtm') || review.includes('looks good')) {
              labels.push('claude-approved');
            }
            if (review.includes('bug') || review.includes('error')) {
              labels.push('potential-bug');
            }
            if (review.includes('jax') && (review.includes('control flow') || review.includes('python if'))) {
              labels.push('jax-control-flow');
            }
            if (review.includes('performance')) {
              labels.push('performance');
            }

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                labels: labels
              });
            }
