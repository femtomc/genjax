[project]
authors = [{ name = "McCoy Becker", email = "mccoyb@mit.edu" }]
name = "genjax"
requires-python = ">= 3.12"
version = "0.1.0"
dependencies = [ "penzai>=0.2.5,<0.3", "beartype>=0.21.0,<0.22", "jaxtyping>=0.3.2,<0.4", "tensorflow-probability>=0.25.0,<0.26",
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64"]

[tool.pixi.pypi-dependencies]
genjax = { path = ".", editable = true }

[tool.pixi.dependencies]
jax = ">=0.6.0,<0.7"

[tool.vulture]
make_whitelist = true
min_confidence = 80
paths = ["src"]
sort_by_size = true


[tool.pixi.feature.faircoin.dependencies]
matplotlib = "*"
seaborn = "*"

[tool.pixi.feature.faircoin.pypi-dependencies]
numpyro = "*"

[tool.pixi.feature.faircoin.tasks]
setup = "mkdir -p examples/faircoin/figs"
faircoin-timing = "pixi run python -m examples.faircoin.main"
faircoin-combined = "pixi run python -m examples.faircoin.main --combined"

[tool.pixi.feature.curvefit.dependencies]
matplotlib = "*"
numpy = "*"

[tool.pixi.feature.curvefit.pypi-dependencies]
torch = "*"
numpyro = "*"
pyro-ppl = "*"

[tool.pixi.feature.curvefit.tasks]
setup = "mkdir -p examples/curvefit/figs"
curvefit = "pixi run python examples/curvefit/main.py"
curvefit-data = "pixi run python examples/curvefit/data.py"
curvefit-core = "pixi run python examples/curvefit/core.py"
curvefit-figs = "pixi run python examples/curvefit/figs.py"
curvefit-all = "pixi run curvefit-core && pixi run curvefit-figs"

[tool.pixi.feature.format.tasks]
format = "ruff format . && ruff check . --fix"
format-md = "npx prettier --write '**/*.md'"
format-all = "ruff format . && ruff check . --fix && npx prettier --write '**/*.md'"
vulture = "vulture"
precommit-install = "pre-commit install"
precommit-run = "pre-commit run --all-files"

[tool.pixi.feature.docs.tasks]
deploy = "quarto publish gh-pages ./quarto"
preview = "quarto preview ./quarto"

[tool.pixi.feature.test.tasks]
test = "pytest tests/ -v --cov=src/genjax --cov-report=xml --cov-report=html --cov-report=term"
coverage = "pytest tests/ -v --cov=src/genjax --cov-report=html --cov-report=term && echo 'Coverage report available at htmlcov/index.html'"
doctest = "xdoctest src/genjax --verbose=2"
doctest-module = "xdoctest src/genjax/{module} --verbose=2"
test-all = "pytest tests/ -v --cov=src/genjax --cov-report=xml --cov-report=html --cov-report=term && xdoctest src/genjax --verbose=2"

[tool.pixi.feature.gol.dependencies]
matplotlib = "*"

[tool.pixi.feature.gol.tasks]
gol-timing = "pixi run python examples/gol/main.py"
gol = "pixi run python examples/gol/figs.py"

[tool.pixi.feature.localization.dependencies]
matplotlib = "*"
seaborn = "*"

[tool.pixi.feature.localization.tasks]
localization = "pixi run python -m examples.localization.main"

[tool.pixi.environments]
default = { solve-group = "default" }
format = { features = ["format"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "docs" }
test = { features = ["test"], solve-group = "default" }
faircoin = { features = ["faircoin"], solve-group = "default" }
curvefit = { features = ["curvefit"], solve-group = "default" }
gol = { features = ["gol"], solve-group = "default" }
localization = { features = ["localization"], solve-group = "default" }

[tool.pixi.feature.format.dependencies]
nodejs = "*"

[dependency-groups]
format = ["ruff>=0.9.2,<0.10", "vulture>=2.14,<3", "pre-commit>=4.0,<5"]
docs = ["jupyter", "genstudio"]
test = [
    "pytest>=8.0,<9",
    "pytest-cov>=6.0,<7",
    "coverage>=7.0,<8",
    "xdoctest>=1.1.0,<2",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/examples/*", "*/quarto/*", "*/docs/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",                       # Show short test summary for all results
    "--strict-markers",          # Require all markers to be defined
    "--strict-config",           # Strict configuration parsing
    "--cov=src/genjax",          # Coverage for source code
    "--cov-report=term-missing", # Show missing lines in terminal
    "--cov-report=html",         # Generate HTML coverage report
    "--cov-report=xml",          # Generate XML coverage for CI
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (taking >5 seconds)",
    "fast: marks tests as fast (taking <1 second)",
    "integration: marks tests as integration tests (cross-component)",
    "unit: marks tests as unit tests (single component)",
    "regression: marks tests as regression tests (bug prevention)",
    "adev: marks tests for ADEV gradient estimators",
    "smc: marks tests for Sequential Monte Carlo",
    "mcmc: marks tests for Markov Chain Monte Carlo",
    "vi: marks tests for Variational Inference",
    "hmm: marks tests for Hidden Markov Models",
    "core: marks tests for core GenJAX functionality",
    "pjax: marks tests for PJAX (Probabilistic JAX) functionality",
    "tfp: marks tests requiring TensorFlow Probability",
    "requires_gpu: marks tests that need GPU acceleration",
]
filterwarnings = [
    "ignore::DeprecationWarning:jax.*",
    "ignore::DeprecationWarning:tensorflow_probability.*",
    "error::UserWarning",                                  # Turn UserWarnings into errors to catch issues
]

[tool.xdoctest]
# Configure xdoctest for running doctests
modname = "genjax"
command = "list"
verbose = 2
durations = 10
style = "google"
options = "+ELLIPSIS"
