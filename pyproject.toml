[project]
authors = [{ name = "McCoy Becker", email = "mccoyb@mit.edu" }]
name = "genjax"
requires-python = ">= 3.12"
version = "0.1.0"
dependencies = [ "penzai>=0.2.5,<0.3", "beartype>=0.21.0,<0.22", "jaxtyping>=0.3.2,<0.4", "tensorflow-probability>=0.25.0,<0.26",
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pixi.workspace]
channels = ["conda-forge", "nvidia"]
platforms = ["osx-arm64", "linux-64"]

[tool.pixi.dependencies]
jax = ">=0.6.0,<0.7"
matplotlib = ">=3.10.3,<4"

[tool.pixi.pypi-dependencies]
genjax = { path = ".", editable = true }

[tool.pixi.tasks]
# Clean all generated figures from examples
clean-figs = "find examples -name '*.pdf' -o -name '*.png' -o -name '*.jpg' -o -name '*.svg' | grep '/figs/' | xargs rm -f"

[tool.vulture]
make_whitelist = true
min_confidence = 80
paths = ["src"]
sort_by_size = true


[tool.pixi.feature.faircoin.dependencies]
matplotlib = "*"
seaborn = "*"

[tool.pixi.feature.faircoin.pypi-dependencies]
numpyro = "*"

[tool.pixi.feature.faircoin.tasks]
cmd = "faircoin"
# Beta-Bernoulli framework comparison (GenJAX vs NumPyro vs handcoded JAX)
setup = "mkdir -p examples/faircoin/figs"  # Create output directory
faircoin = "pixi run python -m examples.faircoin.main --combined"  # Main command (combined timing + posterior)
faircoin-timing = "pixi run python -m examples.faircoin.main"  # Timing comparison only
faircoin-combined = "pixi run python -m examples.faircoin.main --combined"  # Combined timing + posterior figure (recommended)

[tool.pixi.feature.curvefit.dependencies]
matplotlib = "*"
numpy = "*"

[tool.pixi.feature.curvefit.pypi-dependencies]
numpyro = "*"

[tool.pixi.feature.curvefit.tasks]
cmd = "curvefit"
# Curve fitting with GenJAX and NumPyro
setup = "mkdir -p examples/curvefit/figs"  # Create output directory
curvefit = "pixi run python examples/curvefit/main.py --mode genjax-fast"  # Run fast GenJAX mode (default)
curvefit-full = "pixi run python examples/curvefit/main.py --mode all"  # Run full analysis (slow)
curvefit-data = "pixi run python examples/curvefit/data.py"  # Generate/process data

[tool.pixi.feature.format.tasks]
# Code formatting and linting
format = "ruff format . && ruff check . --fix"  # Format and lint Python code with ruff
format-md = "npx prettier --write '**/*.md'"  # Format Markdown files with prettier
format-all = "ruff format . && ruff check . --fix && npx prettier --write '**/*.md'"  # Format both Python and Markdown files
vulture = "vulture"  # Find unused code
precommit-install = "pre-commit install"  # Install pre-commit hooks
precommit-run = "pre-commit run --all-files"  # Run pre-commit hooks


[tool.pixi.feature.test.tasks]
# Testing and coverage
test = "pytest tests/ -v --cov=src/genjax --cov-report=xml --cov-report=html --cov-report=term"  # Run tests with coverage
test-parallel = "pytest tests/ -v -n auto --cov=src/genjax --cov-report=xml --cov-report=html --cov-report=term"  # Run tests in parallel with auto-detected cores
test-fast = "pytest tests/ -v -n 4 -m 'not slow' --cov=src/genjax"  # Run fast tests on 4 cores
coverage = "pytest tests/ -v --cov=src/genjax --cov-report=html --cov-report=term && echo 'Coverage report available at htmlcov/index.html'"  # Generate coverage report
doctest = "xdoctest src/genjax --verbose=2"  # Run doctests only
doctest-module = "xdoctest src/genjax/{module} --verbose=2"  # Run doctests for specific module
test-all = "pytest tests/ -v --cov=src/genjax --cov-report=xml --cov-report=html --cov-report=term && xdoctest src/genjax --verbose=2"  # Run tests + doctests

[tool.pixi.feature.examples.tasks]
# Run all case studies
examples-setup = "mkdir -p examples/faircoin/figs examples/curvefit/figs examples/gol/figs examples/localization/figs examples/state_space/figs examples/gen2d/figs examples/intuitive_physics/figs examples/programmable_mcts/figs"  # Create all output directories

[tool.pixi.feature.gol.dependencies]
matplotlib = "*"

[tool.pixi.feature.gol.tasks]
cmd = "gol"
# Game of Life inference
gol = "pixi run python -m examples.gol.main"  # Generate all figures
gol-blinker = "pixi run python -m examples.gol.main --mode blinker"  # Blinker reconstruction
gol-logo = "pixi run python -m examples.gol.main --mode logo"  # Logo reconstruction
gol-timing = "pixi run python -m examples.gol.main --mode timing"  # Timing analysis
gol-quick = "pixi run python -m examples.gol.main --chain-length 10 --grid-sizes 10 20"  # Quick run

[tool.pixi.feature.localization.dependencies]
matplotlib = "*"
seaborn = "*"

[tool.pixi.feature.localization.pypi-dependencies]
ptitprince = "*"

[tool.pixi.feature.localization.tasks]
cmd = "localization"
# Particle filter localization - New two-step workflow
localization-generate-data = "pixi run python -m examples.localization.main generate-data --include-basic-demo --include-smc-comparison"  # Generate all experimental data
localization-plot-figures = "pixi run python -m examples.localization.main plot-figures"  # Plot all figures from saved data
# Legacy command for backward compatibility
localization = "pixi run python -m examples.localization.main generate-data --include-basic-demo && pixi run python -m examples.localization.main plot-figures"  # Run full pipeline

[tool.pixi.feature.state_space.dependencies]
matplotlib = "*"
seaborn = "*"

[tool.pixi.feature.state_space.tasks]
cmd = "state-space"
# State space models
state-space = "pixi run python -m examples.state_space.main"  # Basic state space example
state-space-all = "pixi run python -m examples.state_space.main --all"  # All analyses
state-space-convergence = "pixi run python -m examples.state_space.main --convergence"  # Convergence analysis
state-space-quick = "pixi run python -m examples.state_space.main --time-steps 10 --particles 100,500"  # Quick run (reduced params)
state-space-comparison = "pixi run python -m examples.state_space.main --rejuvenation-comparison"  # Rejuvenation comparison
state-space-challenging = "pixi run python -m examples.state_space.main --rejuvenation-comparison --challenging"  # Challenging + rejuvenation
state-space-extreme = "pixi run python -m examples.state_space.main --rejuvenation-comparison --extreme"  # Extreme + rejuvenation
state-space-difficulty = "pixi run python -m examples.state_space.main --difficulty-comparison"  # Difficulty comparison
state-space-comprehensive = "pixi run python -m examples.state_space.main --rejuvenation-comparison --difficulty-comparison"  # All comparisons

[tool.pixi.feature.gen2d.dependencies]
matplotlib = "*"
seaborn = "*"

[tool.pixi.feature.gen2d.tasks]
cmd = "gen2d"
# 2D generative models
gen2d = "pixi run python -m examples.gen2d.main"  # Basic gen2d example
gen2d-all = "pixi run python -m examples.gen2d.main --all"  # All analyses
gen2d-quick = "pixi run python -m examples.gen2d.main --n-frames 10 --n-particles 50"  # Quick run (reduced params)

[tool.pixi.feature.intuitive_physics.dependencies]
matplotlib = "*"
seaborn = "*"

[tool.pixi.feature.intuitive_physics.tasks]
cmd = "intuitive-psych"
# Physics simulation inference
setup = "mkdir -p examples/intuitive_physics/figs"  # Create output directory
intuitive-psych = "pixi run python -m examples.intuitive_physics.main"  # Main command (basic run)
intuitive-psych-env = "pixi run python -m examples.intuitive_physics.main --environment"  # Environment analysis
intuitive-psych-trajectory = "pixi run python -m examples.intuitive_physics.main --trajectory"  # Trajectory analysis
intuitive-psych-action-space = "pixi run python -m examples.intuitive_physics.main --action-space"  # Action space analysis
intuitive-psych-samples = "pixi run python -m examples.intuitive_physics.main --samples"  # Sample analysis
intuitive-psych-timing = "pixi run python -m examples.intuitive_physics.main --timing"  # Timing analysis
intuitive-psych-inference = "pixi run python -m examples.intuitive_physics.main --inference"  # Inference analysis
intuitive-psych-all = "pixi run python -m examples.intuitive_physics.main --all"  # All analyses

[tool.pixi.feature.programmable_mcts.dependencies]
matplotlib = "*"
seaborn = "*"

[tool.pixi.feature.programmable_mcts.tasks]
cmd = "programmable-mcts"
# Monte Carlo Tree Search
setup = "mkdir -p examples/programmable_mcts/figs"  # Create output directory
programmable-mcts = "pixi run python -m examples.programmable_mcts.main"  # Basic run
programmable-mcts-basic = "pixi run python -m examples.programmable_mcts.main --mode basic"  # Basic mode
programmable-mcts-positions = "pixi run python -m examples.programmable_mcts.main --mode positions"  # Position analysis
programmable-mcts-uncertainty = "pixi run python -m examples.programmable_mcts.main --mode uncertainty"  # Uncertainty analysis
programmable-mcts-exact = "pixi run python -m examples.programmable_mcts.main --mode exact"  # Exact solver comparison
programmable-mcts-demo = "pixi run python -m examples.programmable_mcts.main --mode demo"  # Demo mode
programmable-mcts-visualizations = "pixi run python -m examples.programmable_mcts.main --mode visualizations"  # Visualizations
programmable-mcts-all = "pixi run python -m examples.programmable_mcts.main --mode all"  # All modes

[tool.pixi.feature.cuda.system-requirements]
cuda = "12"

[tool.pixi.feature.cuda.target.linux-64.dependencies]
# CUDA-enabled JAX for GPU acceleration on linux-64
jaxlib = { version = ">=0.6.0,<0.7", build = "*cuda12*" }

[tool.pixi.feature.cuda.tasks]
# CUDA GPU acceleration tasks
cuda-info = "python -c 'import jax; print(f\"JAX version: {jax.__version__}\"); print(f\"JAX devices: {jax.devices()}\"); print(f\"Default backend: {jax.default_backend()}\")'"  # Check CUDA availability
cuda-test = "pixi run test -k 'not slow'"  # Run tests with CUDA backend
# CUDA-accelerated case studies
cuda-faircoin = "pixi run -e faircoin-cuda setup && pixi run -e faircoin-cuda faircoin"  # Run faircoin with CUDA (setup figs dir first)
cuda-curvefit = "pixi run -e curvefit-cuda setup && pixi run -e curvefit-cuda curvefit"  # Run curvefit with CUDA (fast mode)
cuda-curvefit-full = "pixi run -e curvefit-cuda setup && pixi run -e curvefit-cuda curvefit-full"  # Run full curvefit with CUDA (slow)
cuda-gol = "pixi run -e gol-cuda gol"  # Run Game of Life with CUDA
cuda-localization-generate-data = "pixi run -e localization-cuda python -m examples.localization.main generate-data --include-basic-demo --include-smc-comparison"  # Generate localization data with CUDA
cuda-localization-plot-figures = "pixi run -e localization-cuda python -m examples.localization.main plot-figures"  # Plot localization figures
cuda-localization = "pixi run -e localization-cuda python -m examples.localization.main generate-data --include-basic-demo --include-smc-comparison && pixi run -e localization-cuda python -m examples.localization.main plot-figures"  # Full localization pipeline with CUDA
cuda-state-space = "pixi run -e state-space-cuda state-space"  # Run state space with CUDA
cuda-gen2d = "pixi run -e gen2d-cuda gen2d"  # Run gen2d with CUDA
cuda-intuitive-psych = "pixi run -e intuitive-psych-cuda intuitive-psych"  # Run intuitive physics with CUDA
cuda-programmable-mcts = "pixi run -e programmable-mcts-cuda programmable-mcts"  # Run MCTS with CUDA
cuda-examples-all = "pixi run cuda-faircoin && pixi run cuda-curvefit && pixi run cuda-gol && pixi run cuda-localization"  # Run core examples with CUDA (fast modes)

[tool.pixi.environments]
default = { solve-group = "default" }
format = { features = ["format"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
examples = { features = ["examples"], solve-group = "default" }
cuda = { features = ["cuda"], solve-group = "cuda" }
faircoin = { features = ["faircoin"], solve-group = "default" }
faircoin-cuda = { features = ["faircoin", "cuda"], solve-group = "cuda" }
curvefit = { features = ["curvefit"], solve-group = "default" }
curvefit-cuda = { features = ["curvefit", "cuda"], solve-group = "cuda" }
gol = { features = ["gol"], solve-group = "default" }
gol-cuda = { features = ["gol", "cuda"], solve-group = "cuda" }
localization = { features = ["localization"], solve-group = "default" }
localization-cuda = { features = ["localization", "cuda"], solve-group = "cuda" }
state-space = { features = ["state_space"], solve-group = "default" }
state-space-cuda = { features = ["state_space", "cuda"], solve-group = "cuda" }
gen2d = { features = ["gen2d"], solve-group = "default" }
gen2d-cuda = { features = ["gen2d", "cuda"], solve-group = "cuda" }
intuitive-psych = { features = ["intuitive_physics"], solve-group = "default" }
intuitive-psych-cuda = { features = ["intuitive_physics", "cuda"], solve-group = "cuda" }
programmable-mcts = { features = ["programmable_mcts"], solve-group = "default" }
programmable-mcts-cuda = { features = ["programmable_mcts", "cuda"], solve-group = "cuda" }

[tool.pixi.feature.format.dependencies]
nodejs = "*"

[dependency-groups]
format = ["ruff>=0.9.2,<0.10", "vulture>=2.14,<3", "pre-commit>=4.0,<5"]
test = [
    "pytest>=8.0,<9",
    "pytest-cov>=6.0,<7",
    "coverage>=7.0,<8",
    "xdoctest>=1.1.0,<2",
    "pytest-xdist>=3.0,<4",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",                       # Show short test summary for all results
    "--strict-markers",          # Require all markers to be defined
    "--strict-config",           # Strict configuration parsing
    "--cov=src/genjax",          # Coverage for source code
    "--cov-report=term-missing", # Show missing lines in terminal
    "--cov-report=html",         # Generate HTML coverage report
    "--cov-report=xml",          # Generate XML coverage for CI
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (taking >5 seconds)",
    "fast: marks tests as fast (taking <1 second)",
    "integration: marks tests as integration tests (cross-component)",
    "unit: marks tests as unit tests (single component)",
    "regression: marks tests as regression tests (bug prevention)",
    "adev: marks tests for ADEV gradient estimators",
    "smc: marks tests for Sequential Monte Carlo",
    "mcmc: marks tests for Markov Chain Monte Carlo",
    "vi: marks tests for Variational Inference",
    "hmm: marks tests for Hidden Markov Models",
    "core: marks tests for core GenJAX functionality",
    "pjax: marks tests for PJAX (Probabilistic JAX) functionality",
    "distributions: marks tests for probability distributions",
    "tfp: marks tests requiring TensorFlow Probability",
    "requires_gpu: marks tests that need GPU acceleration",
]
filterwarnings = [
    "ignore::DeprecationWarning:jax.*",
    "ignore::DeprecationWarning:tensorflow_probability.*",
    "error::UserWarning",                                  # Turn UserWarnings into errors to catch issues
]

[tool.xdoctest]
# Configure xdoctest for running doctests
modname = "genjax"
command = "list"
verbose = 2
durations = 10
style = "google"
options = "+ELLIPSIS"
